import org.apache.tools.ant.taskdefs.condition.Os
import com.bmuschko.gradle.docker.tasks.container.DockerExecContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:angularjs-scaffolding:1.0.3"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        classpath "org.grails.plugins:views-gradle:1.1.6"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradlePluginVersion"
        classpath "org.grails.plugins:database-migration:$databaseMigrationVersion"
        classpath "com.bmuschko:gradle-docker-plugin:$gradleDockerPluginVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradleNodePluginVersion"
    }
}

version "0.1"
group "org.modelcatalogue"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.plugins.views-json"
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.moowork.node'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'codenarc'

repositories {
    jcenter()
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'http://dl.bintray.com/metadata/model-catalogue' }
    maven { url 'http://dl.bintray.com/musketyr/document-builder' }
    maven { url "https://oss.jfrog.org/repo/" }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

ext {
    mySQLRootPassword = 'pa$$w0rd'
    webDriverVersion = System.getenv('WEB_DRIVER_VERSION') ?: '2.53.1'
    host = dockerHost
}

codenarc {
    toolVersion = '0.27.0'
    configFile = new File("${rootProject.projectDir}/conf/codenarc/rules.groovy")
    reportFormat = 'html'
    ignoreFailures = true
}

dependencies {
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    assets "com.bertramlabs.plugins:less-asset-pipeline:$assetPipelineVersion"
    assets "com.bertramlabs.plugins:coffee-asset-pipeline:$assetPipelineVersion"
    assets "com.craigburke.angular:angular-template-asset-pipeline:$angularTemplateAssetPipeline"
    assets "com.craigburke.angular:angular-annotate-asset-pipeline:$angularAnnotateAssetPipeline"
    assets "com.craigburke:js-closure-wrap-asset-pipeline:$jsClosureWrapAssetPipelineVersion"

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails:grails-plugin-gsp"
    compile "org.grails.plugins:angularjs-scaffolding:1.0.3"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:angularjs"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"

    testCompile "org.grails:grails-plugin-testing"

    testCompile "org.grails.plugins:geb"
    testRuntime "net.sourceforge.htmlunit:htmlunit:$htmlunitVersion"
    testRuntime "org.seleniumhq.selenium:selenium-support:$webDriverVersion"
    testCompile "org.seleniumhq.selenium:selenium-htmlunit-driver:$htmlunitdriverVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$webDriverVersion"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$webDriverVersion"
    testCompile "com.codeborne:phantomjsdriver:$phantomjsdriverVersion"
    testCompile "io.github.bonigarcia:webdrivermanager:$webdrivermanagerVersion"

    testCompile "org.grails:grails-datastore-rest-client"

    // RX Java
    compile "io.reactivex:rxjava:$rxJavaVersion"

    // Elastic Search
    compile "org.elasticsearch:elasticsearch:$elasticsearchVersion"

    // Model Catalogue
    compile "org.modelcatalogue:mc-core-api:$mcToolkitVersion"
    compile "org.modelcatalogue:mc-builder-api:$mcToolkitVersion"
    compile "org.modelcatalogue:mc-datatype-validation:$mcToolkitVersion"

    compile "org.modelcatalogue:spreadsheet-builder-poi:$mcSpreadSheetBuilderPoiVersion"

    // Security
    compile "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"
    compile "org.grails.plugins:spring-security-ui:$springSecurityUiVersion"

    // Spring Messaging
    compile "org.springframework:spring-messaging:$springMessagingVersion"

    compile "commons-io:commons-io:2.5"

    // OWLAPI
    compile "net.sourceforge.owlapi:owlapi-oboformat:$owlapiVersion"
    compile "net.sourceforge.owlapi:owlapi-api:$owlapiVersion"
    compile "net.sourceforge.owlapi:owlapi-parsers:$owlapiVersion"

    // POI
    compile "org.apache.poi:poi:$poiVersion"
    compile "org.apache.poi:poi-ooxml:$poiVersion"
    compile "org.apache.poi:ooxml-schemas:$poiOoxmlSchemasVersion"

    // Word
    compile "com.craigburke.document:word:$documentWordVersion"

    // CRF Builder
    compile "org.modelcatalogue:crf-builder-serializer:$crfBuilderVersion"
    compile "org.modelcatalogue:crf-builder-builder:$crfBuilderVersion"
    compile "org.modelcatalogue:crf-builder-preview:$crfBuilderVersion"

    // Karman
    compile 'com.bertramlabs.plugins:karman-grails:0.12.0'

    // Open CSV
    compile "net.sf.opencsv:opencsv:$openCsvVersion"

    // Runtime
    runtime "org.modelcatalogue:spring-security-ajax-aware:0.1.1"
    runtime 'mysql:mysql-connector-java:5.1.24'

    testCompile "org.modelcatalogue:mc-builder-xml:$mcToolkitVersion"
    testCompile "xmlunit:xmlunit:$xmlunitVersion"

    // Database Migration
    compile "org.grails.plugins:database-migration:$databaseMigrationVersion"
    compile "org.liquibase:liquibase-core:$liquibaseCoreVersion"

    // External Configuration
    compile "org.grails.plugins:external-config:$externalConfigVersion"

    // JavaMelody monitoring plugin for Grails 3
    compile "org.grails.plugins:grails-melody-plugin:$grailsMelodyVersion"

    // Grails Console Plugin
    runtime "org.grails.plugins:grails-console:$grailsConsoleVersion"

    compile "org.grails.plugins:grails-executor:$grailsExecutorVersion"

    compile "net.errbuddy.plugins:babel-asset-pipeline:$babelAssetPipelineVersion"
}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

assets {
    // development & test
    // minifyJs = false
    //bundle = false // individually require files in development

    // production
    minifyJs = true
    minifyOptions = [
        strictSemicolons: false,
        mangleOptions: [mangle: false, toplevel: false, defines: null, except: null, no_functions:false],
        genOptions: [indent_start:0, indent_level:4, quote_keys: false, space_colon: false, beautify: false, ascii_only: false, inline_script:false]
    ]
    // this doesn't work properly, only reliable way is to his in setup-frontend.sh script
    excludes = [
        'bootstrap/**/*.*',
        'jquery-ui/**/*.*',
        'font-awesome/**/*.*',
        'core.js/**/*.*',
        'jquery/**/*.*',
        'angular/**/*.*',
        'ace-builds/**/*.*',
        'rxjs/**/*.*',
        'angular-animate/**/*.*',
        'angular-rx/**/*.*',
        'angular-bootstrap/**/*.*',
        'angular-cookies/**/*.*',
        'angular-i18n/**/*.*',
        'angular-i18n/*.js',
        'angular-mocks/**/*.*',
        'angular-sanitize/**/*.*',
        'jasmine/**/*.*',
        'libs/**/*.*',
        '**/*/GruntFile',
        '**/*/GruntFile.js',
        '**/*/gulpfile.babel.js',
        '**/*/karma.conf.js',
        '**/*/Gruntfile',
        '**/*/Gruntfile.coffee',
        '**/*/LICENSE',
        '**/*/COPYING',
        '**/*/README',
        '**/*/*.md',
        '**/*/*.json',
        '**/src/*.*',
        '**/test/*.*',
        '**/cpp/*.*',
        '**/csharp/*.*',
        '**/dart/*.*',
        '**/demos/*.*',
        '**/java/*.*',
        '**/lua/*.*',
        '**/maven/*.*',
        '**/objectivec/*.*',
        '**/python2/*.*',
        '**/python3/*.*',
    ]
    // unspecified in Grails 2
    minifyCss = true
}

task docs {
    dependsOn asciidoctor
    //dependsOn groovydoc
    group 'documentation'
    description 'Generates Asciidoc documentation and API documentation for Groovy Source'
    doLast {
        logger.quiet('Docs generated at build/asciidoc/html5/index.html')
    }
}

// -- Docker MySQL
task pullMySQLImage(type: DockerPullImage) {
    group 'docker-mysql'
    description = "Pull MySQL image in proper version used for MX"
    repository = 'mysql'
    tag = '5.6'
}

task createMySQLContainer(type: DockerCreateContainer, dependsOn: pullMySQLImage) {
    group 'docker-mysql'
    description = "Creates MySQL container for MX. Ignores if the container is already present."
    containerName = 'mx-mysql'
    imageId = 'mysql:5.6'
    portBindings = ['0.0.0.0:43306:3306']
    env = [
        "MYSQL_ROOT_PASSWORD=${mySQLRootPassword}",
        'MYSQL_DATABASE=metadata',
        'MYSQL_USER=metadata',
        'MYSQL_PASSWORD=metadata',
    ] as String[]

    binds = [
        (getBindPath(file('prod-init-data'))): '/docker-entrypoint-initdb.d'
    ]

    onError { e ->
        if (e.class.simpleName == 'ConflictException') {
            logger.lifecycle "Container already exists"
        } else {
            throw e
        }
    }
}

task startMySQLContainer(type: DockerStartContainer) {
    group 'docker-mysql'
    description = "Starts MySQL container for MX. Ignores if the container is already running."
    dependsOn createMySQLContainer
    containerId = 'mx-mysql'
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.lifecycle "Container already started"
        } else {
            throw e
        }
    }
    onComplete {
        logger.lifecycle "MySQL is listening on ports 43306"
    }
}

task ensureMySQLRunning(type: DockerExecContainer,) {
    group 'docker-mysql'
    containerId = 'mx-mysql'
    cmd = ['/bin/sh', '-c', 'while ! mysqladmin ping -h localhost --silent; do sleep 1; done']
}

startMySQLContainer.finalizedBy ensureMySQLRunning

task initTestDatabaseInMySQLContainer(type: DockerExecContainer, dependsOn: startMySQLContainer) {
    group 'docker-mysql'
    containerId = 'mx-mysql'
    cmd = ['mysqladmin', 'create', 'tester', "--password=${mySQLRootPassword}"]
}

task stopMySQLContainer(type: DockerStopContainer) {
    group 'docker-mysql'
    description = "Stops MySQL container for MX. Ignores if the container is not present or running."
    containerId = 'mx-mysql'
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.lifecycle "Container already stopped"
        } else {
            throw e
        }
    }
}

// -- Docker MailHog
task pullMailHogImage(type: DockerPullImage) {
    group 'docker-mailhog'
    description = "Pull MailHog image in proper version used for MX"
    repository = 'mailhog/mailhog'
}

task createMailHogContainer(type: DockerCreateContainer, dependsOn: pullMailHogImage) {
    group 'docker-mailhog'
    description = "Creates MailHog container for MX. Ignores if the container is already present."
    containerName = 'mx-mailhog'
    imageId = 'mailhog/mailhog'
    portBindings = ['0.0.0.0:41025:1025', '0.0.0.0:48025:8025']
    onError { e ->
        if (e.class.simpleName == 'ConflictException') {
            logger.lifecycle "Container already exists"
        } else {
            throw e
        }
    }
}

task startMailHogContainer(type: DockerStartContainer) {
    group 'docker-mailhog'
    description = "Starts MailHog container for MX. Ignores if the container is already running."
    dependsOn createMailHogContainer
    containerId = 'mx-mailhog'
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.lifecycle "Container already started"
        } else {
            throw e
        }
    }
    onComplete {
        logger.lifecycle "Mailhog mail server is listening on port 41025 and the web UI is available at http://${host}:48025"
    }
}

task stopMailHogContainer(type: DockerStopContainer) {
    group 'docker-mailhog'
    description = "Stops MailHog container for MX. Ignores if the container is not present or running."
    containerId = 'mx-mailhog'
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.lifecycle "Container already stopped"
        } else {
            throw e
        }
    }
}

// -- Docker ElasticSearch
task pullElasticsearchImage(type: DockerPullImage) {
    group 'docker-elasticsearch'
    description = "Pull Elasticsearch image in proper version used for MX"
    repository = 'metadata/registry-elasticsearch'
    tag = '2'
}

task createElasticsearchContainer(type: DockerCreateContainer, dependsOn: pullElasticsearchImage) {
    group 'docker-elasticsearch'
    description = "Creates Elasticsearch container for MX. Ignores if the container is already present."
    containerName = 'mx-es'
    imageId = 'metadata/registry-elasticsearch:2'
    portBindings = ['0.0.0.0:49200:9200', '0.0.0.0:49300:9300']
    onError { e ->
        if (e.class.simpleName == 'ConflictException') {
            logger.lifecycle "Container already exists"
        } else {
            throw e
        }
    }
}

task startElasticsearchContainer(type: DockerStartContainer) {
    group 'docker-elasticsearch'
    description = "Starts Elasticseach container for MX. Ignores if the container is already running."
    dependsOn createElasticsearchContainer
    containerId = 'mx-es'
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.lifecycle "Container already started"
        } else {
            throw e
        }
    }
    onComplete {
        logger.lifecycle "Elasticsearch is listening on ports 49200 and 49300"
    }
}

task stopElasticsearchContainer(type: DockerStopContainer) {
    group 'docker-elasticsearch'
    description = "Stops MySQL container for MX. Ignores if the container is not present or running."
    containerId = 'mx-es'
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.lifecycle "Container already stopped"
        } else {
            throw e
        }
    }
}

task startContainers(dependsOn: [startElasticsearchContainer, startMySQLContainer, startMailHogContainer]) {
    group 'docker'
    description "Starts all containers required for running production environment"
}

task stopContainers(dependsOn: [stopElasticsearchContainer, stopMySQLContainer, stopMailHogContainer]) {
    group 'docker'
    description "Stops all containers required for running production environment"
}

docker {
    if (System.getenv('DOCKER_HOST'))  {
        url = System.getenv('DOCKER_HOST')
    }
    if (System.getenv('DOCKER_CERT_PATH'))  {
        certPath = file(System.getenv('DOCKER_CERT_PATH'))
    }
}

node {
    // Version of node to use.
    version = '5.12.0'

    // Version of npm to use.
    npmVersion = '3.8.6'

    download = true
}

task npmCacheConfig(type: NpmTask, dependsOn: nodeSetup) {
    group 'javascript'
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    group 'javascript'
    description = "Install Node.js packages"
    args = [ 'install' ]
    //inputs.files file('package.json')
    outputs.files file('node_modules')
}

task bowerInstall(type: NodeTask) {
    group 'javascript'
    description = "Resolves Bower dependencies"
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    // inputs.files file('bower.json')
    outputs.files file('grails-app/assets/bower_components')
    dependsOn npmPackages
}

task cleanUpBowerDependencies(type: Delete) {
    group 'javascript'
    delete 'grails-app/assets/bower_components/ace-builds/demo'
    delete 'grails-app/assets/bower_components/ace-builds/src'
    delete 'grails-app/assets/bower_components/ace-builds/src-min'
    delete 'grails-app/assets/bower_components/ace-builds/src-noconflict'
    delete 'grails-app/assets/bower_components/ace-builds/textarea'
    delete 'grails-app/assets/bower_components/angular-file-saver/gulpfile.babel.js'
    delete 'grails-app/assets/bower_components/angular-file-saver/src'
    delete 'grails-app/assets/bower_components/angular-file-saver/docs'
    delete 'grails-app/assets/bower_components/sly-repeat/scripts'
    delete 'grails-app/assets/bower_components/sly-repeat/src'
}
bowerInstall.finalizedBy cleanUpBowerDependencies

task cleanNodeModulesFolder(type: Delete) {
    group 'javascript'
    description 'Delete the nodes_modules directory and all its contents'
    delete 'node_modules'
}

clean.dependsOn cleanNodeModulesFolder

task karmaTest(type: NodeTask) {
    group 'verification'
    description = "Runs Karma tests"
    script = file('node_modules/karma/bin/karma')
    args = [ 'start', '--single-run', '--browsers', 'Firefox']
    inputs.files file('karma.conf.json')
    inputs.files files('src/test/javascripts') // 'test/js'
    inputs.files files('grails-app/assets')
    outputs.files file('build/test-reports-js') // target/test-reports-js
    dependsOn([bowerInstall])
}
check.dependsOn karmaTest

private static void assertJava8()  {
    assert Jvm.current().javaVersion.java8Compatible
}

private static String getBindPath(File file) {
    if (Os.isFamily(Os.FAMILY_WINDOWS))  {
        return "/${file.absolutePath.replaceAll('\\\\', '/').replaceAll('C:/', 'c/')}"
    }
    return file.absolutePath
}

private static String getGrailsw()  {
    Os.isFamily(Os.FAMILY_WINDOWS) ? 'grailsw.bat' : './grailsw'
}

private static String getDockerHost() {
    if (Os.isFamily(Os.FAMILY_WINDOWS))  {
        try {
            return "docker-machine ip".execute().text.trim()

        } catch(ignored) {
            println "Cannot determine docker ip, falling back to 'localhost'"
            return 'localhost'
        }
    }
    return 'localhost'
}

bootRun {
    systemProperties = System.properties
}

test {
    systemProperties = System.properties
}

integrationTest {
    systemProperties = System.properties
}

dbmChangelogSync.group 'Database Migration Plugin'
dbmChangelogSyncSql.group 'Database Migration Plugin'
dbmClearChecksums.group 'Database Migration Plugin'
dbmDbDoc.group 'Database Migration Plugin'
dbmDiff.group 'Database Migration Plugin'
dbmDropAll.group 'Database Migration Plugin'
dbmFutureRollbackCountSql.group 'Database Migration Plugin'
dbmFutureRollbackSql.group 'Database Migration Plugin'
dbmGenerateChangelog.group 'Database Migration Plugin'
dbmGenerateGormChangelog.group 'Database Migration Plugin'
dbmGormDiff.group 'Database Migration Plugin'
dbmListLocks.group 'Database Migration Plugin'
dbmMarkNextChangesetRan.group 'Database Migration Plugin'
dbmMarkNextChangesetRanSql.group 'Database Migration Plugin'
dbmReleaseLocks.group 'Database Migration Plugin'
dbmRollback.group 'Database Migration Plugin'
dbmRollbackCount.group 'Database Migration Plugin'
dbmRollbackCountSql.group 'Database Migration Plugin'
dbmRollbackSql.group 'Database Migration Plugin'
dbmRollbackToDate.group 'Database Migration Plugin'
dbmRollbackToDateSql.group 'Database Migration Plugin'
dbmStatus.group 'Database Migration Plugin'
dbmTag.group 'Database Migration Plugin'
dbmUpdate.group 'Database Migration Plugin'
dbmUpdateCount.group 'Database Migration Plugin'
dbmUpdateCountSql.group 'Database Migration Plugin'
dbmUpdateSql.group 'Database Migration Plugin'
dbmValidate.group 'Database Migration Plugin'

cleanEclipseClasspath.group 'IDE tasks'
cleanEclipseJdt.group 'IDE tasks'
cleanEclipseProject.group 'IDE tasks'
cleanEclipseWtpComponent.group 'IDE tasks'
cleanEclipseWtpFacet.group 'IDE tasks'
cleanIdeaModule.group 'IDE tasks'
cleanIdeaProject.group 'IDE tasks'
cleanIdeaWorkspace.group 'IDE tasks'
eclipseClasspath.group 'IDE tasks'
eclipseJdt.group 'IDE tasks'
eclipseProject.group 'IDE tasks'
eclipseWtpComponent.group 'IDE tasks'
eclipseWtpFacet.group 'IDE tasks'
ideaModule.group 'IDE tasks'
ideaProject.group 'IDE tasks'
ideaWorkspace.group 'IDE tasks'

compileGroovy.group 'Compilation tasks'
compileGroovyPages.group 'Compilation tasks'
compileGsonViews.group 'Compilation tasks'
compileIntegrationTestGroovy.group 'Compilation tasks'
compileIntegrationTestJava.group 'Compilation tasks'
compileJava.group 'Compilation tasks'
compileTestGroovy.group 'Compilation tasks'
compileTestJava.group 'Compilation tasks'
compileWebappGroovyPages.group 'Compilation tasks'
